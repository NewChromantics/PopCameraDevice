name: Create Release

env:
  project: PopH264

on:
  push:
    branches:
      - master
      - '*Test*'
    #gr: testing, but cannot have path AND branch
    #paths:
    #- '**.json'
  watch:
    types: [started]

jobs:
  Build:
    name: ${{ matrix.config.os }}-${{ matrix.config.type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          # tsdk: Disabled as the kinect dependencies break the build
          # - os: ubuntu-latest
          #   type: linux
          #   architecture: x86_64

          - os: ARM64
            type: linux
            architecture: nvidia

          # - os: Pi4
          #   type: linux
          #   architecture: arm64

          - os: windows
            type: Debug
            BuildDirectory: Build\Debug_x6

          - os: macOS
            type: ios
            buildScheme: PopCameraDevice_Ios
          # tsdk: Causes the release to fail
          # - os: macOS
          #   type: osx
          #   buildScheme: PopCameraDevice_Osx

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Configure Windows
        if: matrix.config.os == 'windows'
        uses: microsoft/setup-msbuild@v1.0.0

      - name: Windows
        if: matrix.config.os == 'windows'
        uses: NewChromantics/PopAction_BuildWindows@v1
        with:
          BuildPlatform: x64
          BuildConfiguration: ${{ matrix.config.type }}
          # would be nice to extract this from visual studio
          BuildDirectory: ${{ matrix.config.BuildDirectory }}
          project: ${{ env.project }}

      - name: Apple
        if: matrix.config.os == 'macOS'
        uses: NewChromantics/PopAction_BuildApple@v1
        with:
          BuildScheme: ${{ matrix.config.buildScheme }}
          project: ${{ env.project }}

      - name: Linux
        if: matrix.config.type == 'linux'
        uses: NewChromantics/PopAction_BuildLinux@v1
        with:
          architecture: ${{ matrix.config.architecture }}
          project: ${{ env.project }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.os }}-${{ matrix.config.type }}
          path: Build

  publish-gpr:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      # Download artifacts into Packaging dir
      - uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.project }}.Package/

      # copy files we want in the release/package into the package dir
      - name: Copy files for packaging
        run: |
         echo Copying files into $PACKAGE_DIR
         echo Project is ${{ env.project }}
         echo Project2 is $project
         cp Readme.md $PACKAGE_DIR
        env:
          PACKAGE_DIR: ${{ env.project }}.Package/

      # make a release
      - name: Make github release
        # only try and make a release if this is a release (to help testing npm packaging)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: fnkr/github-action-ghr@v1   
        env:
         GHR_COMPRESS: xz
         GHR_PATH: ${{ env.project }}.Package/
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # setup node for npm packaging
      - name: Make github package
        uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://npm.pkg.github.com/

      # set dry-run if this isn't a tag so npm publish will run, but not do anything (and not fail)
      - name: Set npm publish as dry-run
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: echo "::set-env name=NPM_PACKAGE_DRY_RUN::--dry-run"

      # copy files we want to
      # download github-publish dependencies (ci), then publish from package dir
      - run: |
         npm ci
         npm publish $NPM_PACKAGE_DRY_RUN
        working-directory: ${{ env.project }}.Package/
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
